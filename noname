
print("222")
queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local Players = game.Players
local TeleportCheck = false
Players.LocalPlayer.OnTeleport:Connect(function(State)
	if (not TeleportCheck) and queueteleport then
		TeleportCheck = true
		 queue_on_teleport([[
    loadstring(game:HttpGet('https://raw.githubusercontent.com/MarvelousKing55209/universal-script-stuff/refs/heads/main/noname'))()
     ]])
	end
end)

wait(10)
print("3")





for i, v in pairs(workspace.Items:GetChildren()) do 
if v.Name == "Diamond" and v:FindFirstChildOfClass("MeshPart") then 
local part = v:FindFirstChildOfClass("MeshPart")
repeat 
wait()
  if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and part ~= nil and part.Parent ~= nil and part.Parent.Parent ~= nil  then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(part.Position)
local args = {
	v
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("RequestTakeDiamonds"):FireServer(unpack(args))
end
until game.Players.LocalPlayer.Character == nil or game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") == nil or part == nil or part.Parent == nil or part.Parent.Parent == nil 
end
end

for i, v in pairs(workspace.Items:GetChildren()) do 
if v.Name == "Stronghold Diamond Chest" then

if v:FindFirstChild("Main") == nil then
repeat 
wait()
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")  then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.WorldPivot
end
until v:FindFirstChild("Main")
end
 local startTime = tick() 
repeat 
wait()
  if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")  then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.WorldPivot
local args = {
	v
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("RequestOpenItemChest"):FireServer(unpack(args))
end
until tick() - startTime >= 12 or game.Players.LocalPlayer.Character == nil or game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") == nil or part == nil or part.Parent == nil or part.Parent.Parent == nil 
end
end
wait(1)

for i, v in pairs(workspace.Items:GetChildren()) do 
if v.Name == "Diamond" and v:FindFirstChildOfClass("MeshPart") then 
local part = v:FindFirstChildOfClass("MeshPart")
repeat 
wait()
  if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and part ~= nil and part.Parent ~= nil and part.Parent.Parent ~= nil then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(part.Position)
local args = {
	v
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("RequestTakeDiamonds"):FireServer(unpack(args))
end
until game.Players.LocalPlayer.Character == nil or game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") == nil or part == nil or part.Parent == nil or part.Parent.Parent == nil 
end
end
print("4")

while task.wait(2) do 
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local function getServer()
    local placeId = game.PlaceId
    local currentJobId = game.JobId

    local cursor = ""
    local servers = {}

    repeat
        local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100&cursor="..cursor
        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and result and result.data then
            for _, server in ipairs(result.data) do
                if server.id ~= currentJobId and server.playing and server.playing ~= nil and server.playing < (server.maxPlayers - 1) then
                    table.insert(servers, server)
                end
            end
            cursor = result.nextPageCursor or ""
        else
            warn("Failed to fetch servers, waiting to retryâ€¦")
            task.wait(1) -- wait 5 sec if throttled
        end

        task.wait(1) -- small wait to avoid hitting rate limit
    until cursor == "" or #servers > 0

    if #servers > 0 then
        return servers[math.random(1, #servers)].id
    end
    return nil
end

local targetServer = getServer()
if targetServer then
    TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer, Players.LocalPlayer)
else
    warn("No available servers found")
end
end
