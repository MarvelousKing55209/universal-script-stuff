print("222")
queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local Players = game.Players
local TeleportCheck = false
Players.LocalPlayer.OnTeleport:Connect(function(State)
	if (not TeleportCheck) and queueteleport then
		TeleportCheck = true
		 queue_on_teleport([[[
     while task.wait() do 
    loadstring(game:HttpGet('https://raw.githubusercontent.com/MarvelousKing55209/universal-script-stuff/refs/heads/main/noname'))()
     end
     ]])
	end
end)


print("1")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local PlaceId = game.PlaceId  -- current place ID

-- Function to find a random valid server
local function GetRandomServer()
	local servers = {}
	local cursor = ""
	
	repeat
		local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor
		local success, response = pcall(function()
			return HttpService:JSONDecode(game:HttpGet(url))
		end)
		
		if success and response and response.data then
			for _, server in ipairs(response.data) do
				-- Filter: only servers that are available and not full
				if server.id and server.playing and server.maxPlayers 
					and server.playing < server.maxPlayers then
					table.insert(servers, server.id)
				end
			end
			
			cursor = response.nextPageCursor or ""
		else
			cursor = ""
		end
	until #servers > 0 or cursor == ""
	
	if #servers > 0 then
		return servers[math.random(1, #servers)]
	end
	
	return nil
end

-- Teleport the local player to a random open & valid server
local player = Players.LocalPlayer
local serverId = GetRandomServer()

if serverId then
	local success, err = pcall(function()

for i, v in pairs(workspace.Items:GetChildren()) do 
if v.Name == "Diamond" and v:FindFirstChildOfClass("MeshPart") then
local part = v:FindFirstChildOfClass("MeshPart")
repeat 
wait()
  if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(part.Position)
local args = {
	workspace.Items.Diamond
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("RequestTakeDiamonds"):FireServer(unpack(args))
end
until game.Players.LocalPlayer.Character == nil or game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") == nil or part == nil or part.Parent == nil or part.Parent.Parent == nil 
end
end

for i, v in pairs(workspace.Items:GetChildren()) do 
if v.Name == "Stronghold Diamond Chest" and v:FindFirstChildOfClass("MeshPart") then 
local part = v:FindFirstChildOfClass("MeshPart")
local startTime = tick() 
repeat 
wait()
  if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(part.Position)
local args = {
	workspace:WaitForChild("Items"):WaitForChild("Stronghold Diamond Chest")
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("RequestOpenItemChest"):FireServer(unpack(args))
end
until tick() - startTime >= 12 or game.Players.LocalPlayer.Character == nil or game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") == nil or part == nil or part.Parent == nil or part.Parent.Parent == nil  
end
end
wait(1)
for i, v in pairs(workspace.Items:GetChildren()) do 
if v.Name == "Diamond" and v:FindFirstChildOfClass("MeshPart") then
local part = v:FindFirstChildOfClass("MeshPart")
repeat 
wait()
  if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(part.Position)
local args = {
	workspace.Items.Diamond
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("RequestTakeDiamonds"):FireServer(unpack(args))
end
until game.Players.LocalPlayer.Character == nil or game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") == nil or part == nil or part.Parent == nil or part.Parent.Parent == nil 
end
end

wait(10)
 print("2") 
  TeleportService:TeleportToPlaceInstance(PlaceId, serverId, player)
end)
	if not success then
		warn("Teleport failed: " .. tostring(err))
	end
else
	warn("No available servers found!")
end
